{"version":3,"sources":["Todo.js","NewTodoForm.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Todo","props","handleRemove","bind","this","removeTodo","id","className","onClick","task","Component","NewTodoForm","state","handleChange","handleSubmit","event","setState","target","name","value","preventDefault","createTodo","uuid","onSubmit","htmlFor","type","placeholder","onChange","TodoList","todos","create","remove","newTodo","filter","t","map","todo","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uTA6BeA,G,kBAzBX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,aAAe,EAAKA,aAAaC,KAAlB,gBAFL,E,4EAMfC,KAAKH,MAAMI,WAAWD,KAAKH,MAAMK,M,+BAKjC,OACI,6BAEI,wBAAIC,UAAU,mBACV,8BAAM,uBAAGA,UAAU,cAAcC,QAASJ,KAAKF,gBAG9CE,KAAKH,MAAMQ,W,GAnBbC,c,gCCyCJC,EAzCf,YACI,WAAYV,GAAQ,IAAD,8BACf,4CAAMA,KACDW,MAAQ,CACTH,KAAM,IAEV,EAAKI,aAAe,EAAKA,aAAaV,KAAlB,gBACpB,EAAKW,aAAe,EAAKA,aAAaX,KAAlB,gBANL,EADvB,0EASiBY,GAETX,KAAKY,SAAL,eACKD,EAAME,OAAOC,KAAOH,EAAME,OAAOE,UAZ9C,mCAeiBJ,GACTA,EAAMK,iBACNhB,KAAKH,MAAMoB,WAAX,eAA2BjB,KAAKQ,MAAhC,CAAuCN,GAAIgB,SAC3ClB,KAAKY,SAAS,CACVP,KAAM,OAnBlB,+BA4BQ,OACI,6BACI,0BAAMc,SAAUnB,KAAKU,cACjB,2BAAOU,QAAQ,OAAOjB,UAAU,oBAAhC,YACA,2BAAOkB,KAAK,OAAOlB,UAAU,eAAemB,YAAY,YAAYpB,GAAG,OAAOY,KAAK,OAAOC,MAAOf,KAAKQ,MAAMH,KAAMkB,SAAUvB,KAAKS,eACjI,4BAAQN,UAAU,wBAAlB,kBAjCpB,GAAiCG,aCoClBkB,E,YAlCX,WAAY3B,GAAQ,IAAD,8BACf,4CAAMA,KACDW,MAAQ,CAAEiB,MAAO,IACtB,EAAKC,OAAS,EAAKA,OAAO3B,KAAZ,gBACd,EAAK4B,OAAS,EAAKA,OAAO5B,KAAZ,gBAJC,E,oEAMZ6B,GACH5B,KAAKY,SAAS,CAAEa,MAAM,GAAD,mBAAMzB,KAAKQ,MAAMiB,OAAjB,CAAwBG,Q,6BAI1C1B,GACHF,KAAKY,SAAS,CACVa,MAAOzB,KAAKQ,MAAMiB,MAAMI,QAAO,SAAAC,GAAC,OAAIA,EAAE5B,KAAOA,S,+BAK3C,IAAD,OACCuB,EAAQzB,KAAKQ,MAAMiB,MAAMM,KAAI,SAAAC,GAC/B,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAK9B,GAAIA,GAAI8B,EAAK9B,GAAIG,KAAM2B,EAAK3B,KAAMJ,WAAY,EAAK0B,YAE9E,OACI,6BACI,yCACA,kBAAC,EAAD,CAAaV,WAAYjB,KAAK0B,SAC9B,wBAAIvB,UAAU,mBACTsB,Q,GA5BEnB,aCiBR4B,G,uLAfX,OAEE,yBAAK/B,UAAU,8BACf,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,aACb,kBAAC,EAAD,a,GAPQG,cCQE6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6f184fdc.chunk.js","sourcesContent":["import React, { component, Component } from 'react'\r\nimport'./todo.css'\r\n\r\nclass Todo extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleRemove = this.handleRemove.bind(this)\r\n    }\r\n    handleRemove() {\r\n\r\n        this.props.removeTodo(this.props.id)\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {/* <button >Edit</button> */}\r\n                <li className=\"list-group-item\">\r\n                    <span><i className=\"fa fa-trash\" onClick={this.handleRemove} /></span>\r\n                    {/* <button className=\"btn btn-success\" onClick={this.handleRemove}>delete</button> */}\r\n\r\n                    {this.props.task}</li>\r\n            </div>\r\n\r\n        )\r\n\r\n    }\r\n}\r\nexport default Todo;","import React, { Component } from 'react'\r\nimport uuid from 'uuid/v4'\r\n\r\nexport class NewTodoForm extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            task: ''\r\n        }\r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.handleSubmit = this.handleSubmit.bind(this)\r\n    }\r\n    handleChange(event) {\r\n\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        })\r\n    }\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        this.props.createTodo({ ...this.state, id: uuid() })\r\n        this.setState({\r\n            task: ''\r\n        })\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <label htmlFor=\"task\" className=\"font-weight-bold\" >New Todo</label>\r\n                    <input type=\"text\" className=\"form-control\" placeholder=\" New Todo\" id=\"task\" name=\"task\" value={this.state.task} onChange={this.handleChange} />\r\n                    <button className=\"btn btn-success mt-2\">Add todo</button>\r\n                </form>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default NewTodoForm\r\n","import React, { Component } from 'react'\r\nimport Todo from './Todo'\r\nimport NewTodoForm from './NewTodoForm'\r\n\r\nclass TodoList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { todos: [] }\r\n        this.create = this.create.bind(this)\r\n        this.remove = this.remove.bind(this)\r\n    }\r\n    create(newTodo) {\r\n        this.setState({ todos: [...this.state.todos, newTodo] })\r\n\r\n    }\r\n\r\n    remove(id) {\r\n        this.setState({\r\n            todos: this.state.todos.filter(t => t.id !== id)\r\n        })\r\n\r\n\r\n    }\r\n    render() {\r\n        const todos = this.state.todos.map(todo => {\r\n            return <Todo key={todo.id} id={todo.id} task={todo.task} removeTodo={this.remove} />\r\n        })\r\n        return (\r\n            <div>\r\n                <h1>Todo List</h1>\r\n                <NewTodoForm createTodo={this.create} />\r\n                <ul className=\"list-group mt-3\">\r\n                    {todos}\r\n                </ul>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default TodoList;","import React, { Component } from 'react'\nimport TOdoList from './TodoList'\nimport './style.css'\n\nclass App extends Component {\n  render() {\n    return (\n      \n      <div className=\"row justify-content-center\">\n      <div className=\"col-md-6 card\">\n        <div className=\"card-body\">\n          <TOdoList />\n        </div>\n      </div>\n      </div>\n\n\n\n    )\n  }\n}\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport'font-awesome/css/font-awesome.min.css'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}